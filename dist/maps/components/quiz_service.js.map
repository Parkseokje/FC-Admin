{"version":3,"sources":["components/quiz_service.js"],"names":["define","Util","QuizService","options","data","callback","_self","this","extendOptions","extendData","isNew","setOptions","require","QuizComponent","prototype","quiz_list","a","b","extend","key","hasOwnProperty","init","length","index","quiz_type","addQuizSingleAnswer","addQuizMultiOptionWithOneAnswer","addQuizMultiOptionWithMultiAnswer","getRandomString","wrapper","parent","order","quiz_id","type","obj","quiz_type_name","createGUID","removeQuiz","quiz","delete","splice","deleteQuiz","axios","params","option_group_id","alert","updateQuizIndexes","console","log","error","deleteQuizOption","option_id","then","response","validateQuiz","isValid","validate","saveSession","root_wrapper","find","val","method","url","course_list_id","course_id","title","quiz_group_id","course_list_order","saveQuiz","setData","saveSessionAndQuiz","confirm","all","spread","res","forEach","promises","results","arr","moveQuizIndexes","oldIndex","newIndex","s4","Math","random","toString","substring"],"mappings":"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","file":"components/quiz_service.js","sourcesContent":["/**\n * @reference: https://gist.github.com/jonnyreeves/2474026\n */\n\"use strict\";\ndefine([\"common\", \"quiz_component\"], function (Util) {\n  var QuizComponent = require(\"quiz_component\");\n  var _self = null;\n\n  /**\n   * QuizService 생성자\n   */\n  function QuizService (options, data, callback) {\n    // 옵션을 설정한다.\n    _self = this;\n\n    _self.extendOptions(options);\n    _self.extendData(data);\n    _self.isNew = (data.course_list_id === null);\n    _self.callback = callback;\n    _self.setOptions(options);\n    _self.init();\n  }\n\n  QuizService.prototype = {\n\n    // 퀴즈 서비스에 대한 옵션 정보를 담고 있다\n    options: {},\n    // course_list 데이터\n    data: {},\n    // QuizComponent 리스트\n    quiz_list: [],\n    extend: function (a, b) {\n      for (var key in b) {\n        if (b.hasOwnProperty(key)) {\n          a[key] = b[key];\n        }\n      }\n      return a;\n    },\n    // 옵션을 확장한다.\n    extendOptions: function (options) {\n      this.options = this.extend({}, this.options);\n      this.extend(this.options, options);\n    },\n    // 데이터를 확장한다.\n    extendData: function (data) {\n      this.data = this.extend({}, this.data);\n      this.extend(this.data, data);\n    },\n    init: function () {\n      // 데이터가 있을 경우 QuizComponent 를 생성한다.\n      if (_self.data.quiz_list) {\n        for (var index = 0; index < _self.data.quiz_list.length; index++) {\n          var data = _self.data.quiz_list[index];\n\n          switch (data.quiz_type) {\n          case \"A\":\n            _self.addQuizSingleAnswer(data);\n            break;\n\n          case \"B\":\n            _self.addQuizMultiOptionWithOneAnswer(data);\n            break;\n\n          case \"C\":\n            _self.addQuizMultiOptionWithMultiAnswer(data);\n            break;\n\n          default:\n            break;\n          }\n        }\n      }\n    },\n    // 옵션을 확장한다.\n    setOptions: function (options) {\n      function extend (a, b) {\n        for (var key in b) {\n          if (b.hasOwnProperty(key)) {\n            a[key] = b[key];\n          }\n        }\n        return a;\n      }\n\n      _self.options = extend({}, _self.options);\n      extend(_self.options, options);\n    },\n    // 랜덤 문자열을 생성한다.\n    // api 명에 특정 문자열이 포함될 경우 (예: create, string ..) 동작하지 않을 수 있다.\n    getRandomString: function () {\n      return axios.get(\"/api/v1/randomkey\");\n    },\n    // 단답형 퀴즈를 생성한다.\n    addQuizSingleAnswer: function (data) {\n      var options = {\n        wrapper: _self.options.wrapper,\n        parent: _self,\n        index: data ? data.order : _self.quiz_list.length\n      };\n\n      if (!data) {\n        data = {\n          quiz_id: null,\n          type: _self.data.type,\n          quiz_type: \"A\",\n          quiz_type_name: \"단답형\"\n        };\n      }\n\n      var obj = new QuizComponent(options, data);\n      _self.quiz_list.push(obj);\n    },\n    // 선택형 퀴즈를 생성한다.\n    addQuizMultiOptionWithOneAnswer: function (data) {\n      var options = {\n        wrapper: _self.options.wrapper,\n        parent: _self,\n        index: data ? data.order : _self.quiz_list.length\n      };\n      var obj = null;\n\n      if (data) {\n        obj = new QuizComponent(options, data);\n        _self.quiz_list.push(obj);\n      } else {\n        data = {\n          quiz_id: null,\n          type: _self.data.type,\n          quiz_type: \"B\",\n          quiz_type_name: \"선택형\",\n          option_group_id: _self.createGUID()\n        };\n        obj = new QuizComponent(options, data);\n        _self.quiz_list.push(obj);\n      }\n    },\n    // 다답형 퀴즈를 생성한다.\n    addQuizMultiOptionWithMultiAnswer: function (data) {\n      var options = {\n        wrapper: _self.options.wrapper,\n        parent: _self,\n        index: data ? data.order : _self.quiz_list.length\n      };\n      var obj = null;\n\n      if (data) {\n        options.index = data.order;\n        obj = new QuizComponent(options, data);\n        _self.quiz_list.push(obj);\n      } else {\n        data = {\n          quiz_id: null,\n          type: _self.data.type,\n          quiz_type: \"C\",\n          quiz_type_name: \"다답형\",\n          option_group_id: _self.createGUID() // res.data.id\n        };\n        obj = new QuizComponent(options, data);\n        _self.quiz_list.push(obj);\n      }\n    },\n    // 퀴즈를 삭제한다.\n    removeQuiz: function (quiz) {\n      if (!confirm(\"삭제하시겠습니까?\")) { return false; }\n\n      if (quiz.isNew) {\n        quiz.delete();\n        _self.quiz_list.splice(quiz.options.index, 1);\n        _self.updateQuizIndexes();\n      } else {\n        _self.deleteQuiz(quiz);\n      }\n    },\n    // DB에서 퀴즈를 삭제한다.\n    deleteQuiz: function (quiz) {\n      axios.delete(\"/course/quiz\", {\n        params: {\n          quiz_id: quiz.data.quiz_id,\n          option_group_id: quiz.data.option_group_id\n        }\n      })\n      .then(function (response) {\n        alert(\"퀴즈를 삭제하였습니다.\");\n        quiz.delete();\n        _self.quiz_list.splice(quiz.options.index, 1);\n        _self.updateQuizIndexes();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    },\n    // DB에서 퀴즈 보기를 삭제한다.\n    deleteQuizOption: function (option_id, callback) {\n      axios.delete(\"/course/quiz/option\", {\n        params: {\n          option_id: option_id\n        }\n      })\n            .then(function (response) {\n              alert(\"보기를 삭제하였습니다.\");\n              callback();\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n    },\n    // 퀴즈를 저장하기 전 유효성 검사\n    validateQuiz: function () {\n      var isValid = true;\n      for (var index = 0; index < _self.quiz_list.length; index++) {\n        var quiz = _self.quiz_list[index];\n        if (!quiz.validate()) {\n          isValid = false;\n          break;\n        }\n      }\n\n      return isValid;\n    },\n    // 세션을 생성/수정 한다.\n    saveSession: function () {\n      // console.log('saveSession');\n      var title = _self.options.root_wrapper.find(\"#title\").val();\n      if (_self.isNew) {\n        return axios({\n          method: \"post\",\n          url: \"/course/quiz/courselist\",\n          data: {\n            course_list_id: null,\n            course_id: _self.data.course_id,\n            title: title,\n            type: _self.data.type,\n            order: _self.data.session_count + 1,\n            quiz_group_id: _self.data.quiz_group_id\n          }\n        });\n      } else {\n        return axios({\n          method: \"put\",\n          url: \"/course/courselist\",\n          data: {\n            course_list_id: _self.data.course_list_id,\n            course_list_order: _self.data.course_list_order,\n            title: title\n          }\n        });\n      }\n    },\n        // 퀴즈를 생성/수정 한다.\n    saveQuiz: function (quiz) {\n            // 저장할 데이터를 셋팅한다.\n      quiz.setData();\n\n      if (quiz.isNew) {\n                // 입력\n        return axios({\n          method: \"post\",\n          url: \"/course/quiz\",\n          data: {\n            quiz_group_id: _self.data.quiz_group_id,\n            quiz: quiz.data\n          }\n        });\n      } else {\n                // 수정\n        return axios({\n          method: \"put\",\n          url: \"/course/quiz\",\n          data: {\n            quiz_group_id: _self.data.quiz_group_id,\n            quiz: quiz.data\n          }\n        });\n      }\n    },\n        // 세션과 퀴즈를 일괄 저장한다.\n    saveSessionAndQuiz: function () {\n      if (!_self.quiz_list.length) {\n        alert(\"등록된 퀴즈가 없습니다. 퀴즈 유형을 먼저 선택하세요.\");\n        return false;\n      }\n\n      if (!_self.validateQuiz()) { return false; }\n\n      if (!confirm(\"자료를 저장하시겠습니까?\")) { return false; }\n\n      // 세션을 저장한다.\n      axios.all([ _self.saveSession() ])\n        .then(axios.spread(function (res) {\n            // 각각의 퀴즈를 저장한다.\n          var promises = [];\n          _self.quiz_list.forEach(function (quiz) {\n            promises.push(_self.saveQuiz(quiz));\n          });\n\n          // 저장 성공 시 윈도우 팝업을 종료한다\n          axios.all(promises).then(function (results) {\n            results.forEach(function (response) {\n              // console.log(response.data);\n            });\n            _self.callback(\"success\");\n          });\n        }));\n    },\n        // 퀴즈의 순서를 재작성한다.\n    updateQuizIndexes: function () {\n      var arr = _self.quiz_list;\n      for (var index = 0; index < arr.length; index++) {\n        arr[index].setIndex(index);\n      }\n            // console.info(_self.quiz_list);\n    },\n        // 퀴즈의 순서를 변경한다.\n    moveQuizIndexes: function (oldIndex, newIndex) {\n      var arr = _self.quiz_list;\n      arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      _self.updateQuizIndexes();\n    },\n        // guid 를 생성한다. (용도: 보기그룹아이디)\n    createGUID: function () {\n      function s4 () {\n        return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n      }\n      return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n    }\n  };\n\n  return QuizService;\n});\n"],"sourceRoot":"/source/"}